/* LugosiParser.java */
/* Generated By:JavaCC: Do not edit this line. LugosiParser.java */
import java.io.*;

public class LugosiParser implements LugosiParserConstants {
  public static void main(String args[]) throws ParseException,IOException {
      LugosiParser parser = new LugosiParser(new FileInputStream(args[0]));
      parser.LugosiParser();
      System.out.println("Parsing Successful");
  }

  static final public void LugosiParser() throws ParseException {
    Main();
    Func();
    jj_consume_token(0);
  }

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
  static final public void ListaArgPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Tipo();
      jj_consume_token(ID);
      ListaArgPrime();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void ListaArg() throws ParseException {
    Tipo();
    jj_consume_token(ID);
    ListaArgPrime();
  }

// FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" | "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
  static final public void Func() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNCTION:{
      FuncPrime();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void FuncPrime() throws ParseException {
    jj_consume_token(FUNCTION);
    Tipo();
    jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case VOID:
    case FLOAT:{
      ListaArg();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    VarDecl();
    SeqComandos();
    jj_consume_token(RBRACE);
    Func();
  }

//LISTAEXP -> EXP | LISTAEXP "," EXP
  static final public void ListaExpPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      Exp();
      ListaExpPrime();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void ListaExp() throws ParseException {
    Exp();
    ListaExpPrime();
  }

// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
  static final public void Op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case LT:{
      jj_consume_token(LT);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")" | TOKEN_numliteral | "true" | "false"
  static final public void FatorPrime() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case LPAREN:
    case NUM:
    case ID:{
      ListaExp();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        FatorPrime();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
      }
    case NUM:{
      jj_consume_token(NUM);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// EXP -> "(" EXP OP EXP ")" | FATOR
  static final public void Exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      Exp();
      Op();
      Exp();
      jj_consume_token(RPAREN);
      break;
      }
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      Fator();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// COMANDO -> TOKEN_id ":=" EXP ";" | TOKEN_id "(" LISTAEXP? ")" ";" | "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";" | "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";" | "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";" | "return" EXP ";" | "print" "(" EXP ")" ";"
  static final public void ComandoPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      Exp();
      jj_consume_token(SEMICOLON);
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAREN:
      case NUM:
      case ID:{
        ListaExp();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      ComandoPrime();
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      SeqComandos();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(DO);
      jj_consume_token(LBRACE);
      SeqComandos();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
      break;
      }
    case DO:{
      jj_consume_token(DO);
      jj_consume_token(LBRACE);
      SeqComandos();
      jj_consume_token(RBRACE);
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(SEMICOLON);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
  static final public void SeqComandos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case DO:
    case RETURN:
    case PRINT:
    case ID:{
      SeqComandosPrime();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void SeqComandosPrime() throws ParseException {
    Comando();
    SeqComandos();
  }

// TIPO -> "int" | "bool" | "float" | "void
  static final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      VarDeclPrime();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

//  VARDECL -> VARDECL "var" TIPO TOKEN_id ";" | vazio
  static final public void VarDeclPrime() throws ParseException {
    jj_consume_token(VAR);
    Tipo();
    jj_consume_token(ID);
    jj_consume_token(SEMICOLON);
    VarDecl();
  }

  static final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LBRACE);
    VarDecl();
    SeqComandos();
    jj_consume_token(RBRACE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x1000,0x78000,0x1000000,0xfc000000,0x86000,0x80000,0x6000,0x86000,0x86000,0x2080000,0xf80,0xf80,0x78000,0x40,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x7,0x18,0x0,0x18,0x18,0x18,0x0,0x10,0x10,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public LugosiParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LugosiParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LugosiParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LugosiParser(LugosiParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
